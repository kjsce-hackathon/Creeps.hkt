--
-- PostgreSQL database dump
--

-- Dumped from database version 9.6.3
-- Dumped by pg_dump version 9.6.3

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: tiger; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA tiger;


ALTER SCHEMA tiger OWNER TO postgres;

--
-- Name: tiger_data; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA tiger_data;


ALTER SCHEMA tiger_data OWNER TO postgres;

--
-- Name: topology; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA topology;


ALTER SCHEMA topology OWNER TO postgres;

--
-- Name: SCHEMA topology; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA topology IS 'PostGIS Topology schema';


--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: address_standardizer; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS address_standardizer WITH SCHEMA public;


--
-- Name: EXTENSION address_standardizer; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION address_standardizer IS 'Used to parse an address into constituent elements. Generally used to support geocoding address normalization step.';


--
-- Name: address_standardizer_data_us; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS address_standardizer_data_us WITH SCHEMA public;


--
-- Name: EXTENSION address_standardizer_data_us; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION address_standardizer_data_us IS 'Address Standardizer US dataset example';


--
-- Name: fuzzystrmatch; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS fuzzystrmatch WITH SCHEMA public;


--
-- Name: EXTENSION fuzzystrmatch; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION fuzzystrmatch IS 'determine similarities and distance between strings';


--
-- Name: ogr_fdw; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS ogr_fdw WITH SCHEMA public;


--
-- Name: EXTENSION ogr_fdw; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION ogr_fdw IS 'foreign-data wrapper for GIS data access';


--
-- Name: postgis; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS postgis WITH SCHEMA public;


--
-- Name: EXTENSION postgis; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgis IS 'PostGIS geometry, geography, and raster spatial types and functions';


--
-- Name: pgrouting; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS pgrouting WITH SCHEMA public;


--
-- Name: EXTENSION pgrouting; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgrouting IS 'pgRouting Extension';


--
-- Name: pointcloud; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS pointcloud WITH SCHEMA public;


--
-- Name: EXTENSION pointcloud; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pointcloud IS 'data type for lidar point clouds';


--
-- Name: pointcloud_postgis; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS pointcloud_postgis WITH SCHEMA public;


--
-- Name: EXTENSION pointcloud_postgis; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pointcloud_postgis IS 'integration for pointcloud LIDAR data and PostGIS geometry data';


--
-- Name: postgis_sfcgal; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS postgis_sfcgal WITH SCHEMA public;


--
-- Name: EXTENSION postgis_sfcgal; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgis_sfcgal IS 'PostGIS SFCGAL functions';


--
-- Name: postgis_tiger_geocoder; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS postgis_tiger_geocoder WITH SCHEMA tiger;


--
-- Name: EXTENSION postgis_tiger_geocoder; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgis_tiger_geocoder IS 'PostGIS tiger geocoder and reverse geocoder';


--
-- Name: postgis_topology; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS postgis_topology WITH SCHEMA topology;


--
-- Name: EXTENSION postgis_topology; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgis_topology IS 'PostGIS topology spatial types and functions';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: city; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE city (
    city_id integer NOT NULL,
    name character varying,
    location geography(Point,4326),
    state_id integer
);


ALTER TABLE city OWNER TO postgres;

--
-- Name: show_cities(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION show_cities() RETURNS SETOF city
    LANGUAGE sql
    AS $$
     SELECT * FROM city;
$$;


ALTER FUNCTION public.show_cities() OWNER TO postgres;

--
-- Name: show_cities(double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION show_cities(lon double precision, lat double precision, dist double precision) RETURNS SETOF city
    LANGUAGE sql
    AS $$
     	SELECT * from city where city_id<5 order by city_id;

$$;


ALTER FUNCTION public.show_cities(lon double precision, lat double precision, dist double precision) OWNER TO postgres;

--
-- Name: country; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE country (
    gid integer NOT NULL,
    area double precision,
    perimeter double precision,
    cntry_ numeric,
    cntry_id numeric,
    fips_cntry character varying,
    gmi_cntry character varying,
    cntry_name character varying,
    sovereign character varying,
    pop_cntry double precision,
    curr_type character varying,
    curr_code character varying,
    landlocked character varying,
    color_map character varying,
    sovereign_ character varying,
    the_geom geometry(MultiPolygon)
);


ALTER TABLE country OWNER TO postgres;

--
-- Name: country_gid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE country_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE country_gid_seq OWNER TO postgres;

--
-- Name: country_gid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE country_gid_seq OWNED BY country.gid;


--
-- Name: locale; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE locale (
    locale_id integer NOT NULL,
    name character varying,
    location geometry(Point),
    city_id integer
);


ALTER TABLE locale OWNER TO postgres;

--
-- Name: locale_locale_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE locale_locale_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE locale_locale_id_seq OWNER TO postgres;

--
-- Name: locale_locale_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE locale_locale_id_seq OWNED BY locale.locale_id;


--
-- Name: river; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE river (
    gid integer,
    name character varying,
    diak_cde character varying,
    name2 character varying,
    diak_cde2 character varying,
    type character varying,
    status character varying,
    navig character varying,
    the_geom geometry(MultiLineString)
);


ALTER TABLE river OWNER TO postgres;

--
-- Name: state; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE state (
    state_id integer NOT NULL,
    name character varying,
    location geometry(Point)
);


ALTER TABLE state OWNER TO postgres;

--
-- Name: state_state_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE state_state_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE state_state_id_seq OWNER TO postgres;

--
-- Name: state_state_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE state_state_id_seq OWNED BY city.city_id;


--
-- Name: state_state_id_seq1; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE state_state_id_seq1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE state_state_id_seq1 OWNER TO postgres;

--
-- Name: state_state_id_seq1; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE state_state_id_seq1 OWNED BY state.state_id;


--
-- Name: city city_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY city ALTER COLUMN city_id SET DEFAULT nextval('state_state_id_seq'::regclass);


--
-- Name: country gid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY country ALTER COLUMN gid SET DEFAULT nextval('country_gid_seq'::regclass);


--
-- Name: locale locale_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY locale ALTER COLUMN locale_id SET DEFAULT nextval('locale_locale_id_seq'::regclass);


--
-- Name: state state_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY state ALTER COLUMN state_id SET DEFAULT nextval('state_state_id_seq1'::regclass);


--
-- Data for Name: city; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY city (city_id, name, location, state_id) FROM stdin;
1	Mumbai	0101000020E61000000DE9A6832B3852407187F2AA73133340	1
2	Pune	0101000020E6100000752387E3D4765240F4588EEB3A853240	1
4	Kolhapur	0101000020E61000007ACAC573918F52406898350C7AB43040	1
3	 Nagpur	0101000020E61000007CFF3053A4C5534064BECD2C53253540	1
5	Thane	0101000020E61000007C838A05993E524079365085E4373340	1
6	Amravati	0101000020E610000079C3222BE4715340F77D9301FBEF3440	1
7	Nashik	0101000020E61000008F33F21E8C7252408BC9761959FF3340	1
8	Aurangabad	0101000020E6100000C830DDDAF8D55240D9637D5E4CE03340	1
9	Akola	0101000020E6100000190E3AD7664153403D9E961FB8B43440	1
\.


--
-- Data for Name: country; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY country (gid, area, perimeter, cntry_, cntry_id, fips_cntry, gmi_cntry, cntry_name, sovereign, pop_cntry, curr_type, curr_code, landlocked, color_map, sovereign_, the_geom) FROM stdin;
0	1116.6700000000001	726.10000000000002	66.000000000	66.000000000	US	USA	United States	United States	258833000	Dollar	USD	N	5	United States	
1	1694.0219999999999	2210.5799999999999	252.000000000	252.000000000	CA	CAN	Canada	Canada	28402320	Dollar	CAD	N	4	Canada	
\.


--
-- Name: country_gid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('country_gid_seq', 1, true);


--
-- Data for Name: locale; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY locale (locale_id, name, location, city_id) FROM stdin;
1	Airoli	010100000004159F4CED3F52404424F90093283340	1
2	Ambernath	010100000026CD7A8CCD4B52404B3CA06CCA353340	1
3	Ambivli	0101000000966C8665FD4A52408DC8C1B68F443340	1
4	Andheri	01010000009CB7FB662C365240C444DECDAE1E3340	1
5	Asangaon	0101000000322A5F86B55352405BD3179D87703340	1
6	Atgaon	0101000000DB961293015552402142B7F2ED803340	1
7	Badlapur	01010000001F9DBAF2594F52400F99F221A82A3340	1
8	Baman Dongari	01010000004527F0F384415240DE150B8D71F93240	1
9	Bandra	010100000038AE354ACD355240141049E3060E3340	1
10	Bhandup	01010000002ED1B41F043C5240A2597E8571243340	1
11	Bhivpuri Road	0101000000FB97FFEB375552407C48539852F83240	1
12	Bhiwandi	0101000000F9331713F64252406BF46A80D2443340	1
13	Byculla	0101000000DADF7E654A355240CFB7AA9102FA3240	1
14	Mumbai Chhatrapati Shivaji Maharaj Terminus	010100000087B7184D78355240BE19901898F03240	1
15	Chinchpokli	0101000000808E45894C355240CBD0C2AFA2FC3240	1
16	Currey Road	0101000000D2B716774D3552406D3590D37CFE3240	1
17	Dadar	010100000025B1A4DCFD355240C767B27F9E043340	1
18	Dahanu Road	010100000042A55BC0952F52409F8B2BD3D4FD3340	1
20	Mulund	01010000008F311C74AE3D5240B0F72C1911283340	1
19	Vikhroli	01010000000C7151D2683B5240D02C6409C61C3340	1
21	Nahur	010100000024A3B904963C5240598231C797273340	1
22	Kanjurmarg	0101000000FCE3BD6A653B52403BB885F8D1203340	1
23	Vikhroli	01010000000C7151D2683B5240D02C6409C61C3340	1
24	Ghatkopar	01010000003703B749203A52408D6E7319ED153340	1
25	Vidyavihar	010100000013CA0C6572395240E3DAF5775B143340	1
26	Kurla	010100000000975BB546385240D51AEF33D3103340	1
27	Sion	0101000000AAEE91CD553752409C8C2AC3B80B3340	1
28	Matunga	0101000000285D9FDE31365240065D67E844073340	1
29	Sandhurst Road	010100000019AE0E80B8355240B262B83A00F63240	1
30	Masjib Bunder	0101000000B10CBB39A63552400807D6CCB5F33240	1
31	Parel	01010000007065E48725355240EC6580B0F8FE3240	1
32	Thane	0101000000031203136E3E5240FF8DE2C1BB2F3340	2
34	Mumbra	0101000000F7AE415F7A415240E5B0A0D56E303340	2
35	Diva	01010000000EBB945FAB4252408514F2F741303340	2
36	Dombivli	0101000000FC6F253BB6455240B10408D5BC373340	2
37	Thakurli	01010000005CD71EAC35465240FA916CBFC6393340	2
38	Kalyan	01010000006EBF7CB262485240D13538B6433C3340	2
39	Titwala	0101000000BEE4DAABEA4C52403050AD19744B3340	2
40	Ambivalli	0101000000B0FECF61BE41524034B91803EBB83340	2
41	Khadavli	01010000006B7EFCA5454E5240888384285F583340	2
42	Vasind	010100000031FEC75320515240EE1692DD16683340	2
43	Kardi	0101000000D204E511375952403C832B4597943340	2
44	Kasara	0101000000887A66EE465E52407A90F9DBF9A53340	2
33	Kalwa	010100000051E56A1ACA3F5240D0D7875000323340	2
\.


--
-- Name: locale_locale_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('locale_locale_id_seq', 1, false);


--
-- Data for Name: pointcloud_formats; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY pointcloud_formats (pcid, srid, schema) FROM stdin;
\.


--
-- Data for Name: river; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY river (gid, name, diak_cde, name2, diak_cde2, type, status, navig, the_geom) FROM stdin;
\.


--
-- Data for Name: spatial_ref_sys; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY spatial_ref_sys (srid, auth_name, auth_srid, srtext, proj4text) FROM stdin;
\.


--
-- Data for Name: state; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY state (state_id, name, location) FROM stdin;
1	Mumbai	01010000009ABFF858B0ED5240C89AECFA60C03340
\.


--
-- Name: state_state_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('state_state_id_seq', 9, true);


--
-- Name: state_state_id_seq1; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('state_state_id_seq1', 1, true);


--
-- Data for Name: us_gaz; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY us_gaz (id, seq, word, stdword, token, is_custom) FROM stdin;
\.


--
-- Data for Name: us_lex; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY us_lex (id, seq, word, stdword, token, is_custom) FROM stdin;
\.


--
-- Data for Name: us_rules; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY us_rules (id, rule, is_custom) FROM stdin;
\.


SET search_path = tiger, pg_catalog;

--
-- Data for Name: geocode_settings; Type: TABLE DATA; Schema: tiger; Owner: postgres
--

COPY geocode_settings (name, setting, unit, category, short_desc) FROM stdin;
\.


--
-- Data for Name: pagc_gaz; Type: TABLE DATA; Schema: tiger; Owner: postgres
--

COPY pagc_gaz (id, seq, word, stdword, token, is_custom) FROM stdin;
\.


--
-- Data for Name: pagc_lex; Type: TABLE DATA; Schema: tiger; Owner: postgres
--

COPY pagc_lex (id, seq, word, stdword, token, is_custom) FROM stdin;
\.


--
-- Data for Name: pagc_rules; Type: TABLE DATA; Schema: tiger; Owner: postgres
--

COPY pagc_rules (id, rule, is_custom) FROM stdin;
\.


SET search_path = topology, pg_catalog;

--
-- Data for Name: topology; Type: TABLE DATA; Schema: topology; Owner: postgres
--

COPY topology (id, name, srid, "precision", hasz) FROM stdin;
\.


--
-- Data for Name: layer; Type: TABLE DATA; Schema: topology; Owner: postgres
--

COPY layer (topology_id, layer_id, schema_name, table_name, feature_column, feature_type, level, child_id) FROM stdin;
\.


SET search_path = public, pg_catalog;

--
-- Name: country country_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY country
    ADD CONSTRAINT country_pkey PRIMARY KEY (gid);


--
-- Name: locale locale_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY locale
    ADD CONSTRAINT locale_pkey PRIMARY KEY (locale_id);


--
-- Name: city state_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY city
    ADD CONSTRAINT state_pkey PRIMARY KEY (city_id);


--
-- Name: state state_pkey1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY state
    ADD CONSTRAINT state_pkey1 PRIMARY KEY (state_id);


--
-- Name: city city_state_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY city
    ADD CONSTRAINT city_state_id_fkey FOREIGN KEY (state_id) REFERENCES state(state_id);


--
-- Name: locale locale_city_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY locale
    ADD CONSTRAINT locale_city_id_fkey FOREIGN KEY (city_id) REFERENCES city(city_id);


--
-- PostgreSQL database dump complete
--

